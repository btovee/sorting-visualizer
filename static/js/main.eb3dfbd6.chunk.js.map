{"version":3,"sources":["sorting-algorithms/merge-sort.js","sorting-algorithms/heap-sort.js","sorting-algorithms/constants.js","sorting-algorithms/quick-sort.js","sorting-visualizer/sorting-visualizer.jsx","sorting-algorithms/bubble-sort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","arrLength","COLOUR_CHANGE","MOVE_ELEMENT","recursiveQuickSort","arr","quickSort","start","end","index","pivotValue","pivotIndex","partition","maxHeap","input","left","right","max","swap","indexA","indexB","temp","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","heapSort","nums","Array","isArray","swapped","count","bubbleSort","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","className","map","value","idx","onClick","mergeSort","testSortingAlgorithms","React","Component","min","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb3dfbd6.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    console.log(animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n","// create max heap\r\nfunction maxHeap(input, i, animations) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < arrLength && input[left] > input[max]) {\r\n        max = left\r\n    }\r\n\r\n    if (right < arrLength && input[right] > input[max])     {\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max, animations)\r\n        maxHeap(input, max, animations)\r\n    }\r\n}\r\n\r\nfunction swap(input, indexA, indexB, animations) {\r\n    const temp = input[indexA]\r\n    animations.push([indexA, indexB]);\r\n    input[indexA] = input[indexB];\r\n    animations.push([indexA, input[indexA]]);\r\n    input[indexB] = temp;\r\n    animations.push([indexB, temp]);\r\n}\r\n\r\nexport function heapSort(input) {\r\n    let animations = [];\r\n    arrLength = input.length\r\n\r\n    for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n        maxHeap(input, i, animations)\r\n    }\r\n\r\n    for (let j = input.length - 1; j > 0; j--) {\r\n        swap(input, 0, j, animations)\r\n        arrLength--\r\n\r\n        maxHeap(input, 0, animations)\r\n    }\r\n    return animations;\r\n}\r\n\r\nlet arrLength;\r\n","export const COLOUR_CHANGE = \"colour-change\";\r\nexport const MOVE_ELEMENT = \"move-element\";\r\n","import {COLOUR_CHANGE, MOVE_ELEMENT} from \"./constants\";\r\n\r\nexport function recursiveQuickSort(arr) {\r\n    const animations = [];\r\n    if (arr.length <= 1) return arr;\r\n    quickSort(arr, 0, arr.length - 1, animations)\r\n    console.log(animations);\r\n    return [animations, arr];\r\n}\r\n\r\n\r\nfunction quickSort(arr, start, end, animations) {\r\n    // Base case or terminating case\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n\r\n    // Returns pivotIndex\r\n    let index = partition(arr, start, end, animations);\r\n\r\n    // Recursively apply the same logic to the left and right subarrays\r\n    quickSort(arr, start, index - 1, animations);\r\n    quickSort(arr, index + 1, end, animations);\r\n}\r\n\r\n\r\n\r\nfunction partition(arr, start, end, animations){\r\n    // Taking the last element as the pivot\r\n    const pivotValue = arr[end];\r\n    let pivotIndex = start;\r\n    for (let i = start; i < end; i++) {\r\n        if (arr[i] < pivotValue) {\r\n            // Swapping elements\r\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n            // Change colour of switching elements\r\n            animations.push([i, pivotIndex, COLOUR_CHANGE]);\r\n            // Swapping elements in animation\r\n            animations.push([i, arr[pivotIndex], MOVE_ELEMENT]);\r\n            animations.push([pivotIndex, arr[i], MOVE_ELEMENT]);\r\n            // Moving to next element\r\n            pivotIndex++;\r\n        }\r\n    }\r\n\r\n    // Putting the pivot value in the middle\r\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]]\r\n    // Change color of switching elements\r\n    animations.push([pivotIndex, end, COLOUR_CHANGE]);\r\n    // Swapping elements in animation\r\n    animations.push([pivotIndex, arr[end], MOVE_ELEMENT]);\r\n    animations.push([end, arr[pivotIndex], MOVE_ELEMENT]);\r\n\r\n    return pivotIndex;\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sorting-algorithms/merge-sort';\r\nimport './sorting-visualizer.css';\r\nimport {recursiveQuickSort} from \"../sorting-algorithms/quick-sort\";\r\nimport {COLOUR_CHANGE} from \"../sorting-algorithms/constants\";\r\nimport {heapSort} from \"../sorting-algorithms/heap-sort\";\r\nimport {bubbleSort} from \"../sorting-algorithms/bubble-sort\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MEDIUM_MS = 1;\r\nconst ANIMATION_SPEED_FAST_MS = 0.2;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                console.log(i);\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        console.log(this.state.array);\r\n        const [animations, arr] = recursiveQuickSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneIdx, barTwoIdx, animationType] = animations[i]\r\n            if (animationType === COLOUR_CHANGE) {\r\n                for(let j =0; j < 1; j++) {\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n                }\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = heapSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 === 0;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    bubbleSort() {\r\n       const animations = bubbleSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 === 0;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_FAST_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_FAST_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // NOTE: This method will only work if your sorting algorithms actually return\r\n    // the sorted arrays; if they return the animations (as they currently do), then\r\n    // this method will be broken.\r\n    testSortingAlgorithms() {\r\n        for (let i = 0; i < 100; i++) {\r\n            const array = [];\r\n            const length = randomIntFromInterval(1, 1000);\r\n            for (let i = 0; i < length; i++) {\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`,\r\n                        }}></div>\r\n                ))}\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick={() => this.quickSort()}>Quick Sort (needs work)</button>\r\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick={() => this.testSortingAlgorithms()}>\r\n                    Test Sorting Algorithms (BROKEN)\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","export function bubbleSort(nums) {\r\n    if(!Array.isArray(nums)) return -1; // --->if passed argument is not array\r\n    if(nums.length<2) return nums; // --->if array length is one or less\r\n\r\n    let animations = [];\r\n    let swapped=false\r\n    let temp=0,\r\n        count=-1,\r\n        arrLength=0;\r\n\r\n\r\n    do{\r\n        count ++;\r\n        swapped=false;\r\n        arrLength = (nums.length-1) - count; //---> not loop through sorted items\r\n        for(let i=0; i<=arrLength; i++){\r\n            if(nums[i]>nums[i+1]){\r\n                temp=nums[i+1];\r\n                nums[i+1]=nums[i];\r\n                animations.push([i+1, i]);\r\n                animations.push([i+1, nums[i]]);\r\n                nums[i]=temp;\r\n                animations.push([i, temp]);\r\n                swapped=true;\r\n            }\r\n        }\r\n    }\r\n    while(swapped)\r\n    return animations;\r\n}\r\n","import './App.css';\nimport SortingVisualizer from \"./sorting-visualizer/sorting-visualizer\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <SortingVisualizer/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}