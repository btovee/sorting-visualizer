{"version":3,"sources":["sorting-algorithms/sorting-algorithms.js","sorting-visualizer/sorting-visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","className","map","value","idx","onClick","mergeSort","quickSort","heapSort","bubbleSort","testSortingAlgorithms","React","Component","min","max","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a74e947d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sorting-algorithms/sorting-algorithms.js';\r\nimport './sorting-visualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        // TODO\r\n    }\r\n\r\n    heapSort() {\r\n        // TODO\r\n    }\r\n\r\n    bubbleSort() {\r\n        // TODO\r\n    }\r\n\r\n    // NOTE: This method will only work if your sorting algorithms actually return\r\n    // the sorted arrays; if they return the animations (as they currently do), then\r\n    // this method will be broken.\r\n    testSortingAlgorithms() {\r\n        for (let i = 0; i < 100; i++) {\r\n            const array = [];\r\n            const length = randomIntFromInterval(1, 1000);\r\n            for (let i = 0; i < length; i++) {\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`,\r\n                        }}></div>\r\n                ))}\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick={() => this.testSortingAlgorithms()}>\r\n                    Test Sorting Algorithms (BROKEN)\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import './App.css';\nimport SortingVisualizer from \"./sorting-visualizer/sorting-visualizer\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <SortingVisualizer/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}