{"version":3,"sources":["sorting-algorithms/merge-sort.js","sorting-algorithms/heap-sort.js","sorting-algorithms/quick-sort.js","sorting-visualizer/sorting-visualizer.jsx","sorting-algorithms/bubble-sort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","arrLength","recursiveQuickSort","arr","quickSort","start","end","index","pivotValue","pivotIndex","partition","maxHeap","input","left","right","max","swap","indexA","indexB","temp","PRIMARY_COLOR","SortingVisualizer","props","state","animationSpeed","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","newHeight","height","animateSort","heapSort","nums","Array","isArray","swapped","count","bubbleSort","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","Grid","container","spacing","item","xs","Paper","className","Button","variant","color","onClick","mergeSort","testSortingAlgorithms","map","value","idx","React","Component","min","random","arrayOne","arrayTwo","App","Container","fixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cf80aaee.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    console.log(animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n","// create max heap\r\nfunction maxHeap(input, i, animations) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < arrLength && input[left] > input[max]) {\r\n        max = left\r\n    }\r\n\r\n    if (right < arrLength && input[right] > input[max])     {\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max, animations)\r\n        maxHeap(input, max, animations)\r\n    }\r\n}\r\n\r\nfunction swap(input, indexA, indexB, animations) {\r\n    const temp = input[indexA]\r\n    animations.push([indexA, indexB]);\r\n    input[indexA] = input[indexB];\r\n    animations.push([indexA, input[indexA]]);\r\n    input[indexB] = temp;\r\n    animations.push([indexB, temp]);\r\n}\r\n\r\nexport function heapSort(input) {\r\n    let animations = [];\r\n    arrLength = input.length\r\n\r\n    for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n        maxHeap(input, i, animations)\r\n    }\r\n\r\n    for (let j = input.length - 1; j > 0; j--) {\r\n        swap(input, 0, j, animations)\r\n        arrLength--\r\n\r\n        maxHeap(input, 0, animations)\r\n    }\r\n    return animations;\r\n}\r\n\r\nlet arrLength;\r\n","\r\n\r\nexport function recursiveQuickSort(arr) {\r\n    const animations = [];\r\n    if (arr.length <= 1) return arr;\r\n    quickSort(arr, 0, arr.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\n\r\nfunction quickSort(arr, start, end, animations) {\r\n    // Base case or terminating case\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n\r\n    // Returns pivotIndex\r\n    let index = partition(arr, start, end, animations);\r\n\r\n    // Recursively apply the same logic to the left and right subarrays\r\n    quickSort(arr, start, index - 1, animations);\r\n    quickSort(arr, index + 1, end, animations);\r\n}\r\n\r\n\r\n\r\nfunction partition(arr, start, end, animations){\r\n    // Taking the last element as the pivot\r\n    const pivotValue = arr[end];\r\n    let pivotIndex = start;\r\n    for (let i = start; i < end; i++) {\r\n        if (arr[i] < pivotValue) {\r\n            // Swapping elements\r\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n            // Change colour of switching elements\r\n            animations.push([i, pivotIndex]);\r\n            // Swapping elements in animation\r\n            animations.push([i, arr[pivotIndex]]);\r\n            animations.push([pivotIndex, arr[i]]);\r\n            // Moving to next element\r\n            pivotIndex++;\r\n        }\r\n    }\r\n\r\n    // Putting the pivot value in the middle\r\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]]\r\n    // Change color of switching elements\r\n    animations.push([pivotIndex, end]);\r\n    // Swapping elements in animation\r\n    animations.push([pivotIndex, arr[end]]);\r\n    animations.push([end, arr[pivotIndex]]);\r\n\r\n    return pivotIndex;\r\n}\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport {getMergeSortAnimations} from '../sorting-algorithms/merge-sort';\r\nimport './sorting-visualizer.css';\r\nimport {recursiveQuickSort} from \"../sorting-algorithms/quick-sort\";\r\nimport {heapSort} from \"../sorting-algorithms/heap-sort\";\r\nimport {bubbleSort} from \"../sorting-algorithms/bubble-sort\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MEDIUM_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            animationSpeed: ANIMATION_SPEED_MEDIUM_MS\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    animateSort(animations) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 === 0;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MEDIUM_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = recursiveQuickSort(this.state.array);\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = heapSort(this.state.array);\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = bubbleSort(this.state.array);\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    // NOTE: This method will only work if your sorting algorithms actually return\r\n    // the sorted arrays; if they return the animations (as they currently do), then\r\n    // this method will be broken.\r\n    testSortingAlgorithms() {\r\n        for (let i = 0; i < 100; i++) {\r\n            const array = [];\r\n            const length = randomIntFromInterval(1, 1000);\r\n            for (let i = 0; i < length; i++) {\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Paper className=\"item-spacing\">\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.resetArray()}>Generate New\r\n                            Array</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.mergeSort()}>Merge Sort</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.quickSort()}>Quick Sort (needs\r\n                            work)</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.heapSort()}>Heap Sort</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.bubbleSort()}>Bubble\r\n                            Sort</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.testSortingAlgorithms()}>\r\n                            Test Sorting Algorithms (BROKEN)\r\n                        </Button>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper>\r\n                        {array.map((value, idx) => (\r\n                            <div\r\n                                className=\"array-bar\"\r\n                                key={idx}\r\n                                style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`,\r\n                                }}/>\r\n                        ))}\r\n                    </Paper>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","export function bubbleSort(nums) {\r\n    if(!Array.isArray(nums)) return -1; // --->if passed argument is not array\r\n    if(nums.length<2) return nums; // --->if array length is one or less\r\n\r\n    let animations = [];\r\n    let swapped=false\r\n    let temp=0,\r\n        count=-1,\r\n        arrLength=0;\r\n\r\n\r\n    do{\r\n        count ++;\r\n        swapped=false;\r\n        arrLength = (nums.length-1) - count; //---> not loop through sorted items\r\n        for(let i=0; i<=arrLength; i++){\r\n            if(nums[i]>nums[i+1]){\r\n                temp=nums[i+1];\r\n                nums[i+1]=nums[i];\r\n                animations.push([i+1, i]);\r\n                animations.push([i+1, nums[i]]);\r\n                nums[i]=temp;\r\n                animations.push([i, temp]);\r\n                swapped=true;\r\n            }\r\n        }\r\n    }\r\n    while(swapped)\r\n    return animations;\r\n}\r\n","import './App.css';\nimport SortingVisualizer from \"./sorting-visualizer/sorting-visualizer\";\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n      <Container fixed>\n          <div className=\"App\">\n            <SortingVisualizer/>\n          </div>\n      </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}